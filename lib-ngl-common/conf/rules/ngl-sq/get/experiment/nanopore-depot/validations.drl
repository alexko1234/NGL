//created on: Feb 12, 2019
package rules
	
rule "kit (reagent) non null"
    @nglSQ( validations )
	dialect "java"
	salience 1000
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode!="N", $reagents: reagents)
    	/*$atomicTransfert: ManyToOneContainer(inputContainerUseds!=null, $inputContainerUseds:inputContainerUseds, $inputContainerUseds.size() > 1);*/
		$contextValidation:ContextValidation()
		eval($reagents.size() == 0)
		
    then
	    $contextValidation.addErrors("Experiment","error.validationexp.nanoporedepot.reagent","");
    
	end

rule "containerOut properties non null"
    @nglSQ( validations )
	dialect "java"
	salience 2000
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode=="IP")
		$atomicTransfert: ManyToOneContainer()
		OutputContainerUsed( $experimentPropertiesOut : experimentProperties, $experimentPropertiesOut == null) from $atomicTransfert.outputContainerUseds
		$contextValidation:ContextValidation()
		
	then
	    $contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerout","");
    
	end

rule "tous les containerOut properties non null"
    @nglSQ( validations )
	dialect "java"
	salience 2000
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode=="IP")
		$atomicTransfert: ManyToOneContainer()
		OutputContainerUsed( $experimentPropertiesOut : experimentProperties, $experimentPropertiesOut != null) from $atomicTransfert.outputContainerUseds
		$contextValidation:ContextValidation()
		eval($experimentPropertiesOut.get("runType") == null || $experimentPropertiesOut.get("sampleID") == null || $experimentPropertiesOut.get("type_FC") == null || $experimentPropertiesOut.get("empl_FC") == null || $experimentPropertiesOut.get("ADN_volume") == null || $experimentPropertiesOut.get("quant_ADN_charge") == null || $experimentPropertiesOut.get("chargement") == null || $experimentPropertiesOut.get("nb_pores_QC") == null || $experimentPropertiesOut.get("nb_pores_depot") == null)
		
	then
		$contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerout","");
    	
	end

rule "tag unique et non null si MTPLX"
    @nglSQ( validations )
	dialect "java"
	salience 200
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode=="N");
		$atomicTransfert: ManyToOneContainer(inputContainerUseds!=null, $inputContainerUseds:inputContainerUseds, $inputContainerUseds.size() > 1);
		$contextValidation:ContextValidation()
		
	 then
	 	Integer size = $inputContainerUseds.size();
		InputContainerUsed container;
		String tag;
		Map<String, String> tagMap = new HashMap<String, String>();

		for(int n = 0; n<size; n++){
			container = (InputContainerUsed) $inputContainerUseds.get(n);
			if(container.experimentProperties != null && container.experimentProperties.get("tag") != null) {
				tag = (String) container.experimentProperties.get("tag").value;
				if(tagMap.containsKey(tag)){
					$contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerin.tag", tag, container.code, tagMap.get(tag));
				}else{
					tagMap.put(tag, container.code);
				}
			} else {
				$contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerin.tagnull", container.code);
			}
		}
    end

rule "tag null si SPLX"
    @nglSQ( validations )
	dialect "java"
	salience 200
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode=="N")
		$atomicTransfert: ManyToOneContainer(inputContainerUseds!=null, $inputContainerUseds:inputContainerUseds, $inputContainerUseds.size() < 2);
		$contextValidation:ContextValidation()
		
	then
	 
	 	Integer size = $inputContainerUseds.size();
		InputContainerUsed container;
		
		for(int n = 0; n<size; n++){
			container = (InputContainerUsed) $inputContainerUseds.get(n);
			if(container.experimentProperties != null && container.experimentProperties.get("tag") != null) {
				$contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerin.tagmustnotexist", container.code);
			}
		}
    end
    
rule "emplacement FC unique par ATM"
    @nglSQ( validations )
	dialect "java"
	salience 200
	no-loop
    when
    	$experiment:Experiment($typeCode:typeCode,$typeCode=="nanopore-depot", $stateCode : state.code, $stateCode!="F");
		$contextValidation:ContextValidation()
		
	 then
	 	Map<String, String> empMap = new HashMap<String, String>();
	 	
	 	for(AtomicTransfertMethod atomic : $experiment.atomicTransfertMethods){
	 		for(OutputContainerUsed output : atomic.outputContainerUseds){
	 			if(output.experimentProperties != null && output.experimentProperties.get("empl_FC") != null) {
		    		String empFC = (String) output.experimentProperties.get("empl_FC").value;
		    		if(empMap.containsKey(empFC)){
						$contextValidation.addErrors("Container","error.validationexp.nanoporedepot.containerin.empFC", empFC, output.code, empMap.get(empFC));
					}else{
						empMap.put(empFC, output.code);
					}
		    	}
	    	}
		}
    end