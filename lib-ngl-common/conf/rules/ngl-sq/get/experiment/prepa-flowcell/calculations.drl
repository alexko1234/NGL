package rules

//log

rule "prepa-flowcell"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 
    then
    	Logger.debug("Experiment prepa-flowcell calculations");
    end

  /////////////////////////////// 0

rule "prepa-fc from process"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode =="N")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $processProperties : contents.get(0).processProperties, $experimentProperties : experimentProperties,$experimentProperties!=null) from $atomicTransfert.inputContainerUseds
		 $finalConcentration1 : PropertyValue() from $processProperties.get("finalConcentration1")
		 $phixPercent : PropertyValue() from $processProperties.get("phixPercent")
    	 eval($finalConcentration1.value != null && Number.class.isInstance($finalConcentration1.value) && (null == $experimentProperties.get("finalConcentration") || null == $experimentProperties.get("phixPercent")))
   	then
   		Logger.debug("prepa-fc concentration final");
		PropertySingleValue finalConcentration = new PropertySingleValue((convertPVToDouble($finalConcentration1)*1000), "pM");
		$experimentProperties.put("finalConcentration",finalConcentration);		
		PropertySingleValue phixPercent = new PropertySingleValue($phixPercent.value);
		$experimentProperties.put("phixPercent",phixPercent);	
   	end

 
 /////////////////////////////// 1 
  
rule "volume stock engaged"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $initConc : PropertyValue() from $experimentProperties.get("initConc")
    	 $volumeInitialPrep : PropertyValue() from $experimentProperties.get("volumeInitialPrep")
    	 eval($volumeInitialPrep.value!= null && Number.class.isInstance($volumeInitialPrep.value) && $initConc.value!= null && Number.class.isInstance($initConc.value) && convertPVToDouble($concentrationIN) != 0)
    then
    	Logger.debug("Calculation Test  1.1 volume stock engage : "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeInitialPrep.value + "*" + $initConc.value + "/" + $concentrationIN.value + "=" + Math.round(convertPVToDouble($volumeInitialPrep)*convertPVToDouble($initConc)/convertPVToDouble($concentrationIN)*100.0)/100.0);
		PropertySingleValue value = new PropertySingleValue(Math.round(convertPVToDouble($volumeInitialPrep)*convertPVToDouble($initConc)/convertPVToDouble($concentrationIN)*100.0)/100.0,"\u00B5L");
		if($experimentProperties.get("volumeInitialLib") != null){
   			$experimentProperties.remove("volumeInitialLib");
   		}

   		$experimentProperties.put("volumeInitialLib",value);
    end
    
    
rule "volume PhiX engaged"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $initConc : PropertyValue() from $experimentProperties.get("initConc")
    	 $volumeInitialPrep : PropertyValue() from $experimentProperties.get("volumeInitialPrep")
    	 $phixConcentration : PropertyValue() from $experimentProperties.get("phixConcentration")
    	 eval($volumeInitialPrep.value!= null && Number.class.isInstance($volumeInitialPrep.value) && $initConc.value!= null && Number.class.isInstance($initConc.value) && convertPVToDouble($concentrationIN) != 0)
    then
    	Logger.debug("Calculation Test  1.1 volume PhiX engaged: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeInitialPrep.value + "*" + $initConc.value + "/" + $phixConcentration.value + "=" + Math.round(convertPVToDouble($volumeInitialPrep)*convertPVToDouble($initConc)/convertPVToDouble($phixConcentration)*100.0)/100.0);
		PropertySingleValue value = new PropertySingleValue(Math.round(convertPVToDouble($volumeInitialPrep)*convertPVToDouble($initConc)/convertPVToDouble($phixConcentration)*100.0)/100.0,"\nM");
		if($experimentProperties.get("volumeInitialPhiX") != null){
   			$experimentProperties.remove("volumeInitialPhiX");
   		}

   		$experimentProperties.put("volumeInitialPhiX",value); 
    end
      
    
rule "volume EB lib"
	@nglSQ( calculations )
	dialect "java"
	salience 900
	no-loop
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $volumeInitialPrep : PropertyValue() from $experimentProperties.get("volumeInitialPrep")
    	 $volumeInitialLib : PropertyValue() from $experimentProperties.get("volumeInitialLib")
    	 eval($volumeInitialPrep.value!= null && Number.class.isInstance($volumeInitialPrep.value) 
    	 && $volumeInitialLib.value!= null && Number.class.isInstance($volumeInitialLib.value))
    then
    	Logger.debug("Calculation Test  1.2 volume EB for lib: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeInitialPrep.value + "-" + $volumeInitialLib.value + "=" + Math.round((convertPVToDouble($volumeInitialPrep)-convertPVToDouble($volumeInitialLib))*100.0)/100.0);
		PropertySingleValue value = new PropertySingleValue(Math.round((convertPVToDouble($volumeInitialPrep)-convertPVToDouble($volumeInitialLib))*100.0)/100.0,"\u00B5L");
		
		if($experimentProperties.get("EBVolumeLib") != null){
   			$experimentProperties.remove("EBVolumeLib");
   		}

   		$experimentProperties.put("EBVolumeLib",value);   	
    end
        
rule "volume EB PhiX"
	@nglSQ( calculations )
	dialect "java"
	salience 900
	no-loop
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $volumeInitialPrep : PropertyValue() from $experimentProperties.get("volumeInitialPrep")
    	 $volumeInitialPhiX : PropertyValue() from $experimentProperties.get("volumeInitialPhiX")
    	 eval($volumeInitialPrep.value!= null && Number.class.isInstance($volumeInitialPrep.value) 
    	 && $volumeInitialPhiX.value!= null && Number.class.isInstance($volumeInitialPhiX.value))
    then
   		Logger.debug("Calculation Test  1.2 volume EB for PhiX: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeInitialPrep.value + "-" + $volumeInitialPhiX.value + "=" + Math.round((convertPVToDouble($volumeInitialPrep)-convertPVToDouble($volumeInitialPhiX))*100.0)/100.0);
		PropertySingleValue value = new PropertySingleValue(Math.round((convertPVToDouble($volumeInitialPrep)-convertPVToDouble($volumeInitialPhiX))*100.0)/100.0,"\u00B5L");
		
		if($experimentProperties.get("EBVolumePhiX") != null){
   			$experimentProperties.remove("EBVolumePhiX");
   		}

   		$experimentProperties.put("EBVolumePhiX",value);   		
    end

////////////////////////// 2
       
rule "volume NaOH & HT1"
	@nglSQ( calculations )
	dialect "java"
	salience 800
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $requiredConc1 : PropertyValue() from $experimentProperties.get("requiredConc1")
    	 $volumeInitialPrep : PropertyValue() from $experimentProperties.get("volumeInitialPrep")
    	 $requiredConc2 : PropertyValue() from $experimentProperties.get("requiredConc2")
    	 $volumeFinal : PropertyValue() from $experimentProperties.get("volumeFinal")
    	 eval($requiredConc1.value!= null && Number.class.isInstance($requiredConc1.value) 
    	 	&& $volumeInitialPrep.value!= null && Number.class.isInstance($volumeInitialPrep.value) 
    	 	&& $requiredConc1.value!= null && Number.class.isInstance($requiredConc1.value)
    	 	&& $requiredConc2.value!= null && Number.class.isInstance($requiredConc2.value)
    	 	&& $volumeFinal.value!= null && Number.class.isInstance($volumeFinal.value))
    then   		
    	Logger.debug("Calculation Test  2.1 volume NaOH: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeInitialPrep.value);		
		if($experimentProperties.get("NaOH") != null){
   			$experimentProperties.remove("NaOH");
   		}
   		$experimentProperties.put("NaOH",$volumeInitialPrep);
   		
    	Logger.debug("Calculation Test  2.2 volume HT1 : "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $requiredConc1.value + "*(" + $volumeInitialPrep.value + "+" + $volumeInitialPrep.value +")/(" + $requiredConc2.value + "/" + $volumeFinal.value + ")-(" + $volumeInitialPrep.value + "+" + $volumeInitialPrep.value +")" 
    	+ "=" + Math.round((convertPVToDouble($requiredConc1)*(convertPVToDouble($volumeInitialPrep) + convertPVToDouble($volumeInitialPrep))/(convertPVToDouble($requiredConc2)/convertPVToDouble($volumeFinal))-(convertPVToDouble($volumeInitialPrep)+convertPVToDouble($volumeInitialPrep)))*100.0)/100.0 );
		PropertySingleValue value = new PropertySingleValue(Math.round((convertPVToDouble($requiredConc1)*(convertPVToDouble($volumeInitialPrep) + convertPVToDouble($volumeInitialPrep))/(convertPVToDouble($requiredConc2)/convertPVToDouble($volumeFinal))-(convertPVToDouble($volumeInitialPrep)+convertPVToDouble($volumeInitialPrep)))*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("HT1Volume") != null){
   			$experimentProperties.remove("HT1Volume");
   		}
   		$experimentProperties.put("HT1Volume",value);
    end
   
////////////////////////// 3
       
rule "volume depot lib"
	@nglSQ( calculations )
	dialect "java"
	salience 600
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $finalConcentration : PropertyValue() from $experimentProperties.get("finalConcentration")
    	 $volumeFinal : PropertyValue() from $experimentProperties.get("volumeFinal")
    	 $requiredConc2 : PropertyValue() from $experimentProperties.get("requiredConc2")
    	 eval($finalConcentration.value!= null && Number.class.isInstance($finalConcentration.value)
    	 	&& $volumeFinal.value!= null && Number.class.isInstance($volumeFinal.value)
    	 	&& $requiredConc2.value!= null && Number.class.isInstance($requiredConc2.value))
    then
    	Logger.debug("Calculation Test  3.1 volume depot lib: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $finalConcentration.value + "*" + $volumeFinal.value + "/" + $requiredConc2.value
    		+ "=" + Math.round(convertPVToDouble($finalConcentration)*convertPVToDouble($volumeFinal)/convertPVToDouble($requiredConc2)*100.0)/100.0 );		
		
		PropertySingleValue value = new PropertySingleValue(Math.round(convertPVToDouble($finalConcentration)*convertPVToDouble($volumeFinal)/convertPVToDouble($requiredConc2)*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("volumeDepoLib") != null){
   			$experimentProperties.remove("volumeDepoLib");
   		}
   		$experimentProperties.put("volumeDepoLib",value);
    end
           
rule "volume depot PhiX"
	@nglSQ( calculations )
	dialect "java"
	salience 600
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $finalConcentration : PropertyValue() from $experimentProperties.get("finalConcentration")
    	 $volumeFinalPhiX : PropertyValue() from $experimentProperties.get("volumeFinalPhiX")
    	 $requiredConc2 : PropertyValue() from $experimentProperties.get("requiredConc2")
    	 eval($finalConcentration.value!= null && Number.class.isInstance($finalConcentration.value)
    	 	&& $volumeFinalPhiX.value!= null && Number.class.isInstance($volumeFinalPhiX.value)
    	 	&& $requiredConc2.value!= null && Number.class.isInstance($requiredConc2.value))
    then
    	Logger.debug("Calculation Test  3.2 volume depot PhiX: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $finalConcentration.value + "*" + $volumeFinalPhiX.value + "/" + $requiredConc2.value
    		+ "=" + Math.round(convertPVToDouble($finalConcentration)*convertPVToDouble($volumeFinalPhiX)/convertPVToDouble($requiredConc2)*100.0)/100.0 );		
		
		PropertySingleValue value = new PropertySingleValue(Math.round(convertPVToDouble($finalConcentration)*convertPVToDouble($volumeFinalPhiX)/convertPVToDouble($requiredConc2)*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("volumeDepotPhiX") != null){
   			$experimentProperties.remove("volumeDepotPhiX");
   		}
   		$experimentProperties.put("volumeDepotPhiX",value);
    end
    
rule "volume depot HT1 lib"
	@nglSQ( calculations )
	dialect "java"
	salience 500
	no-loop
	//lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $volumeDepoLib : PropertyValue() from $experimentProperties.get("volumeDepoLib")
    	 $volumeFinal : PropertyValue() from $experimentProperties.get("volumeFinal")
    	 eval($volumeDepoLib.value!= null && Number.class.isInstance($volumeDepoLib.value)
    	 	&& $volumeFinal.value!= null && Number.class.isInstance($volumeFinal.value))
    then   
   		Logger.debug("Calculation Test  3.3 volume depot HT1 for lib: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeFinal.value + "-" + $volumeDepoLib.value
    		+ "=" + Math.round((convertPVToDouble($volumeFinal)-convertPVToDouble($volumeDepoLib))*100.0)/100.0 );	
		PropertySingleValue value = new PropertySingleValue(Math.round((convertPVToDouble($volumeFinal)-convertPVToDouble($volumeDepoLib))*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("HT1VolumeDepoLib") != null){
   			$experimentProperties.remove("HT1VolumeDepoLib");
   		}
   		$experimentProperties.put("HT1VolumeDepoLib",value);   		
   	end
  
rule "volume depot HT1 for PhiX"
	@nglSQ( calculations )
	dialect "java"
	salience 500
	no-loop
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $volumeDepotPhiX : PropertyValue() from $experimentProperties.get("volumeDepotPhiX")
    	 $volumeFinalPhiX : PropertyValue() from $experimentProperties.get("volumeFinalPhiX")
    	 eval($volumeDepotPhiX.value!= null && Number.class.isInstance($volumeDepotPhiX.value)
    	 	&& $volumeFinalPhiX.value!= null && Number.class.isInstance($volumeFinalPhiX.value))
    then   
   		Logger.debug("Calculation Test  3.4 volume depot HT1 for PhiX: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeFinalPhiX.value + "-" + $volumeDepotPhiX.value
    		+ "=" + Math.round((convertPVToDouble($volumeFinalPhiX)-convertPVToDouble($volumeDepotPhiX))*100.0)/100.0 );	
		PropertySingleValue value = new PropertySingleValue(Math.round((convertPVToDouble($volumeFinalPhiX)-convertPVToDouble($volumeDepotPhiX))*100.0)/100.0,"\u00B5L");
   		if($experimentProperties.get("HT1VolumeDepoPhiX") != null){
   			$experimentProperties.remove("HT1VolumeDepoPhiX");
   		}
   		$experimentProperties.put("HT1VolumeDepoPhiX",value);
   	end
   	
   	    
rule "volume a remplasser"
	@nglSQ( calculations )
	dialect "java"
	salience 500
	no-loop
	lock-on-active true
    when
    	 $experiment:Experiment($typeCode:typeCode,$typeCode=="prepa-flowcell", $stateCode : state.code, $stateCode!="F")
    	 $atomicTransfert: ManyToOneContainer( )
    	 InputContainerUsed( $experimentProperties : experimentProperties,$experimentProperties!=null, $concentrationIN:concentration) from $atomicTransfert.inputContainerUseds
    	 $volumeFinal : PropertyValue() from $experimentProperties.get("volumeFinal")
    	 $phixPercent : PropertyValue() from $experimentProperties.get("phixPercent")
    	 eval($phixPercent.value!= null && Number.class.isInstance($phixPercent.value)
    	 	&& $volumeFinal.value!= null && Number.class.isInstance($volumeFinal.value))
    then   
   		Logger.debug("Calculation Test  3.5 volume depot HT1 for lib: "+ $experiment.code+ " "+ $atomicTransfert.line+" "+ $volumeFinal.value + "*" + $phixPercent.value + "/100"
    		+ "=" + Math.round(convertPVToDouble($volumeFinal)*convertPVToDouble($phixPercent)/100.0) );	
		PropertySingleValue value = new PropertySingleValue(Math.round(convertPVToDouble($volumeFinal)*convertPVToDouble($phixPercent)/100.0),"\u00B5L");
   		if($experimentProperties.get("volReplace") != null){
   			$experimentProperties.remove("volReplace");
   		}
   		$experimentProperties.put("volReplace",value);
   			
   		update($experiment);
   		   		
   	end

