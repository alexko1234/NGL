package rules

// 19/07/2017 Copie de lib-normalization...
rule "Debug additional-normalization"
	@nglSQ( calculations )
	dialect "java"
	salience 1000
	no-loop
    when
		$experiment:Experiment($typeCode:typeCode,$typeCode=="additional-normalization")
    eval(true)
    then
		Logger.debug("Rules annotation @nglSQ(calculations) additional-normalization");    
end

// calcul du volume engagé et du tampon
rule "InputVolume in additional-normalization inputContainer"
    @nglSQ( calculations )
	dialect "java"
	salience 920
	no-loop
    when
		$experiment:Experiment($typeCode:typeCode,$typeCode=="additional-normalization")
		$atomicTransfert: OneToOneContainer($inputContainerUsed:inputContainerUseds.get(0), $outputContainerUsed: outputContainerUseds.get(0))	
		
		// !! pb pas de concentration input tant qu'on a pas fait la Quantification!!! ....
		InputContainerUsed($inputConcentration: concentration, $inputConcentration!=null ) from $inputContainerUsed
		InputContainerUsed($inputVolume: volume, $inputVolume!=null ) from $inputContainerUsed
		
		OutputContainerUsed($outputVolume: volume, $outputVolume!=null ) from $outputContainerUsed
		OutputContainerUsed($outputConcentration: concentration, $outputConcentration!=null ) from $outputContainerUsed
		
		// cas 0 OK et cas pas de valeur OK ( volontairement ou avec valeur non numerique)
	    eval ( $outputVolume.value != null && convertPVToDouble($outputVolume) != 0 )
        eval ( $outputConcentration.value != null && convertPVToDouble($outputConcentration) != 0 )
        // NGL-981:25/04/2016 attention si inputConcentration=0 --> division par 0
        eval ( $inputConcentration.value != null && convertPVToDouble($inputConcentration) != 0 )
        
   then
   		Double engVolume = 0.0;
   		Double bfVolume = 0.0;
   		Double inputConcentration = 0.0;
   		
   		// si concentration IN < concentration OUT : inutile d'essayer de faire des calculs--> vol engagé=15, buffer =0
        // ET concentration OUT= concentration IN
		if ( convertPVToDouble($inputConcentration) <= convertPVToDouble($outputConcentration)){	
			inputConcentration = Double.parseDouble($inputConcentration.getValue().toString());
			Logger.debug("Warning: concentration initiale "+ inputConcentration +" plus faible que la concentration de normalisation");
		    
		    if ($inputContainerUsed.experimentProperties !=null && $inputContainerUsed.experimentProperties.containsKey("inputVolume")){
		   
		    	engVolume=convertPVToDouble($inputContainerUsed.experimentProperties.get("inputVolume"));
		    	Logger.debug("set engVolume to inputVolume :"+ engVolume);
		    }else{
		        /// code de normalization !!!!
		        //Logger.debug("set engVolume to default value: 15.0");
		    	//engVolume=15.0;
                // 19/07/2017 => pas de sens de forcer un volume engagé> volume dispo !!!

		    	engVolume=convertPVToDouble( $atomicTransfert.inputContainerUseds.get(0).getVolume());
		    	Logger.debug("set engVolume to dispoVolume="+engVolume);

		    }    
		    
	    } else {
	    
	    	// -1- calcul volume engagé
        	Logger.debug("-1- InputVolume calculation");  
        	Logger.debug("inputConcentration="+ Double.parseDouble($inputConcentration.getValue().toString()) );

       		engVolume = roundValue(convertPVToDouble($outputConcentration)*convertPVToDouble($outputVolume)/convertPVToDouble($inputConcentration));
        	Logger.debug("inputVolume="+ engVolume );
        
		   // -2- calcul volume de tampon : volume buffer= volume out - volume engagé
			Logger.debug("-2- volume tampon= volumeout - volume engagé");
			
			bfVolume = roundValue(convertPVToDouble($outputVolume) - engVolume );
		    Logger.debug("bufferVolume="+bfVolume);
		}
		
		PropertySingleValue psvEngVolume = new PropertySingleValue(engVolume, "\u00B5L");
        PropertySingleValue psvBufferVol = new PropertySingleValue(bfVolume, "\u00B5L");
        
        if($inputContainerUsed.experimentProperties==null){
			$inputContainerUsed.experimentProperties = new HashMap<String, PropertyValue>();		
		}else if($inputContainerUsed.experimentProperties.containsKey("bufferVolume")){
			$inputContainerUsed.experimentProperties.remove("bufferVolume");
		}	
	   	$inputContainerUsed.experimentProperties.put("bufferVolume", psvBufferVol);	
	   		
	   	if($inputContainerUsed.experimentProperties==null){
			  $inputContainerUsed.experimentProperties = new HashMap<String, PropertyValue>();		
		}else if($inputContainerUsed.experimentProperties.containsKey("inputVolume")){
			   $inputContainerUsed.experimentProperties.remove("inputVolume");
		}	
	    $inputContainerUsed.experimentProperties.put("inputVolume", psvEngVolume);
	    
	    //  !!!!!!!!!!!!  devrait pas etre ici..
	    // si concentration IN < concentration OUT :  remplacer la concentration OUT par concentration IN
		if ( convertPVToDouble($inputConcentration) <= convertPVToDouble($outputConcentration)){
			Logger.debug("set output concentration to input concentration :"+inputConcentration );
			// code from cns/pool-tube/calculation.drl
	 	    $outputContainerUsed.concentration= $atomicTransfert.inputContainerUseds.get(0).getConcentration();
		}	    
	    
		update($experiment);
end