//created on: Nov 21, 2013
package rules

//declare any global variables here
declare ReadSetKrona
	readSet : ReadSet
	kronaFormat : Boolean 
end


rule "Check sampleOnContainer for create external sample"
	@nglBI( N_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet(sampleCode!=null, sampleOnContainer==null)
		$contextVal : ContextValidation($external:contextObjects["external"], $external!=null, (Boolean)$external==true)
	then
		$contextVal.addErrors("sampleOnContainer","error.no.sampleOnContainer",$readset.sampleCode);
end

rule "Create external sample"
	@nglBI( N_1 )
	dialect "java"
	salience 500
	no-loop
	when
		$readset : ReadSet(sampleCode!=null, $sampleOnContainer:sampleOnContainer, $sampleOnContainer!=null, $sampleOnContainer.sampleCode!=null, $sampleOnContainer.containerSupportCode!=null, sampleOnContainer.properties!=null)
		$contextVal : ContextValidation($external:contextObjects["external"], $external!=null, (Boolean)$external==true)
	then
		//create external sample
		
		//Get sample from NGL
		Sample extSample = MongoDBDAO.findByCode(InstanceConstants.SAMPLE_COLL_NAME, Sample.class, $readset.sampleCode);
		if(extSample==null){
			ILimsRunServices  limsRunServices = Spring.getBeanOfType(ILimsRunServices.class);
			extSample = limsRunServices.findSampleToCreate($readset.sampleCode);
			Logger.debug("Ext sample "+extSample);
			if(extSample!=null){
				$contextVal.setCreationMode();
				InstanceHelpers.save(InstanceConstants.SAMPLE_COLL_NAME,extSample,$contextVal,true);
			}else{
				$contextVal.addErrors("sampleCode","error.no.sample.lims",$readset.sampleCode);
			}
		}
		
		//update sampleOnContainer
		$sampleOnContainer.projectCode = $readset.projectCode;
		$sampleOnContainer.lastUpdateDate = new Date();
		$sampleOnContainer.containerCode = $sampleOnContainer.containerSupportCode;
		$sampleOnContainer.sampleTypeCode = extSample.typeCode;
		$sampleOnContainer.sampleCategoryCode = extSample.categoryCode;
		$sampleOnContainer.referenceCollab = extSample.referenceCollab;
		MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME,  ReadSet.class, 
						DBQuery.is("code", $readset.code), DBUpdate.set("sampleOnContainer", $sampleOnContainer));
		
end

rule "Find Pattern Krona for taxonomy treatment"
	@nglBI( F_QC_1 )
	dialect "java"
	salience 800
	no-loop
	when
		$readset : (ReadSet ( $treatmentTaxo:treatments["taxonomy"] && $treatmentTaxo != null ))
	then
	 	//Check pattern
	 	Logger.debug("Find version in taxonomy krona "+$readset.code);	
		
		//Get krona from read1 or pairs value
		String krona = null;
		if($treatmentTaxo.results.get("read1")!=null){
//			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("read1").get("krona")).value);
			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("read1").get("krona")).getValue());

		}else if($treatmentTaxo.results.get("pairs")!=null){
//			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("pairs").get("krona")).value);
			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("pairs").get("krona")).getValue());
		}
		if(krona!=null){
			Pattern p1 = Pattern.compile(".*<node name=\"all\">\\s+<magnitude><val>(\\d+)</val></magnitude>.*", Pattern.DOTALL);
			Pattern p2 = Pattern.compile(".*<node name=\"all\"\\s+magnitude=\"(\\d+)\">.*", Pattern.DOTALL);
			Pattern p3 = Pattern.compile(".*<node name=\"Root\">\\s+(<members><val>\\S+</val>\\s+</members>\\s+)?<count><val>(\\d+)</val></count>.*", Pattern.DOTALL);
			Pattern p4 = Pattern.compile(".*<node name=\"Root\">\\s+(<members>\\s+<vals>(<val>\\S+</val>)*</vals>\\s+</members>\\s+)?<count><val>(\\d+)</val></count>.*", Pattern.DOTALL);
		
			ReadSetKrona readSetKrona = null;
			if(p1.matcher(krona).matches() || p2.matcher(krona).matches() || p3.matcher(krona).matches() || p4.matcher(krona).matches()){
				readSetKrona = new ReadSetKrona($readset,true);
			}else{
				readSetKrona = new ReadSetKrona($readset,false);
			}
		
			insert(readSetKrona);
		}
end

rule "Set state to In Waiting Transfert CCRT from Avalaible readSet"
	@nglBI( A_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$nextState : State(code=="A")
		$project : Project(bioinformaticParameters!=null, bioinformaticParameters.fgGroup!=null, !StringUtils.isBlank(bioinformaticParameters.fgGroup))
		$readSet : ReadSet(location==null || (location!=null && location!="CCRT"))
	then
		Logger.debug("Update state code "+$readSet.code+" to IW-TF");	
		$nextState.code="IW-TF";
end

rule "Find Fungi for taxonomy treatment"
	@nglBI( F_QC_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readsetKrona : ReadSetKrona (kronaFormat==true)
		$readset : ReadSet($treatmentTaxo:treatments["taxonomy"], $treatmentTaxo != null) from $readsetKrona.readSet 						
	then
		Logger.debug("Find Fungi in taxonomy krona "+$readset.code);	
			
		String krona = null;
//		List<Map<String, ?>> keywordBilan = new ArrayList<Map<String, ?>>();
		List<Map<String, Object>> keywordBilan = new ArrayList<Map<String, Object>>();
		boolean createPropKeywordBilan = true;
		if($treatmentTaxo.results.get("read1")!=null){
			Logger.debug("Get from read1");
//			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("read1").get("krona")).value);
			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("read1").get("krona")).getValue());
			if($treatmentTaxo.results.get("read1").get("keywordBilan")!=null){
//				keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("read1").get("keywordBilan")).value;
				keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("read1").get("keywordBilan")).getValue();
				createPropKeywordBilan=false;
			}
		}else if($treatmentTaxo.results.get("pairs")!=null){
			Logger.debug("Get from pairs");
//			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("pairs").get("krona")).value);
			krona = new String(((PropertyFileValue)$treatmentTaxo.results.get("pairs").get("krona")).getValue());
			if($treatmentTaxo.results.get("pairs").get("keywordBilan")!=null){
//				keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("pairs").get("keywordBilan")).value;
				keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("pairs").get("keywordBilan")).getValue();
				createPropKeywordBilan=false;
			}
		}
		if(createPropKeywordBilan){
//				PropertyObjectListValue pol = new PropertyObjectListValue(new ArrayList<Map<String, ?>>());
				PropertyObjectListValue pol = new PropertyObjectListValue(new ArrayList<Map<String, Object>>());
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
					DBQuery.is("code", $readset.code),
					DBUpdate.set("treatments.taxonomy.pairs.keywordBilan", pol));
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
					DBQuery.is("code", $readset.code),
					DBUpdate.set("treatments.taxonomy.read1.keywordBilan", pol));
		}
		
		if(krona!=null){
			Pattern p1 = Pattern.compile(".*<node name=\"Fungi\">\\s+<magnitude><val>(\\d+)</val></magnitude>.*", Pattern.DOTALL);
			Matcher m1 = p1.matcher(krona);
												
			Pattern p2 = Pattern.compile(".*<node name=\"Fungi\"\\s+magnitude=\"(\\d+)\">.*", Pattern.DOTALL);
			Matcher m2 = p2.matcher(krona);

			Pattern p3 = Pattern.compile(".*<node name=\"Fungi\">\\s+(<members><val>\\S+</val>\\s+</members>\\s+)?<count><val>(\\d+)</val></count>.*", Pattern.DOTALL);
			Matcher m3 = p3.matcher(krona);
		
			String value ="0";
			Double fungiPercentValue = 0.0;
		
			if(m1.matches() || m2.matches() || m3.matches()){
				value = (m1.matches())?m1.group(1):((m2.matches())?m2.group(1):m3.group(2));
				Logger.debug("Value "+value);
				fungiPercentValue = (Double.valueOf(value) / 20000) * 100;
				Logger.debug("Match Group Fungi = "+fungiPercentValue);
			}
			
//			List<Map<String, ?>> keywordBilan = ((PropertyObjectListValue)$treatmentTaxo.results.get("read1").get("keywordBilan")).value;

//			List<Map<String, ?>> keywordBRemove = new ArrayList<Map<String, ?>>(); 
//			for(Map<String, ?> keywordOne : keywordBilan){
			List<Map<String, Object>> keywordBRemove = new ArrayList<Map<String, Object>>(); 
			for(Map<String, Object> keywordOne : keywordBilan){
				String keywordValue = (String)keywordOne.get("keyword");
				if(keywordValue.equals("Fungi")){
					Logger.debug("keywordValue = "+keywordValue);
					keywordBRemove.add(keywordOne);
				}	
			}
			keywordBilan.removeAll(keywordBRemove);
			
			Map<String, Object> fungiKeyword = new HashMap<String, Object>();
			fungiKeyword.put("keyword","Fungi");
			fungiKeyword.put("percent",fungiPercentValue);
			fungiKeyword.put("nbSeq",Integer.valueOf(value));
			keywordBilan.add(fungiKeyword);
			if($treatmentTaxo.results.get("read1")!=null){
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
					DBQuery.is("code", $readset.code),
					DBUpdate.set("treatments.taxonomy.read1.keywordBilan.value", keywordBilan));
			}else if($treatmentTaxo.results.get("pairs")!=null){
				MongoDBDAO.update(InstanceConstants.READSET_ILLUMINA_COLL_NAME, ReadSet.class, 
					DBQuery.is("code", $readset.code),
					DBUpdate.set("treatments.taxonomy.pairs.keywordBilan.value", keywordBilan));
			}
			
		}
end


rule "Send mail agirs F_VQC"
	@nglBI( F_VQC_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$readset : ReadSet(typeCode == "default-readset" || typeCode == "rsillumina")
	then
		Logger.debug("Send mail agirs F_VQC "+$readset.code);
		Spring.getBeanOfType(ILimsRunServices.class).sendMailFVQC($readset);
			
end

rule "Set state to Avalaible from Finished Transfert CCRT"
	@nglBI( F_TF_1 )
	dialect "java"
	salience 600
	no-loop
	when
		$nextState : State(code=="F-TF")
		$project : Project(bioinformaticParameters!=null, bioinformaticParameters.fgGroup!=null, !StringUtils.isBlank(bioinformaticParameters.fgGroup))
	then
		Logger.debug("State F-TF to A");
		$nextState.code="A";
end