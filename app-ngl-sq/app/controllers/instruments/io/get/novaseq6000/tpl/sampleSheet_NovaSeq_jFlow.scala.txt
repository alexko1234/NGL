@(e:models.laboratory.experiment.instance.Experiment, containers: List[models.laboratory.container.instance.Container], tagModel: controllers.instruments.io.utils.TagModel)
@import java.lang.Boolean; var jnt=true;
@import controllers.instruments.io.utils._;

@for(etm <- e.atomicTransfertMethods.sortWith(_.line < _.line)){
	@for(c <- etm.inputContainerUseds.sortWith(_.code < _.code)){
	
		@for((k,cs) <- c.contents.groupBy(_.projectCode)){
			@for((key1,cos1) <- cs.groupBy(CsvHelper.getContentProcessProperties(_,"analyseType", e))){
				@for((key2,cos2) <- cos1.groupBy(CsvHelper.getContentProcessProperties(_,"Run_Name"))){
					@for((key3,cos3) <- cos2.groupBy(CsvHelper.getContentProcessProperties(_,"reference_genome", e))){
						@for((key,cos) <- cos3.groupBy(CsvHelper.getContentProcessProperties(_,"reference_transcriptome", e))){
						
							@*** Si Amplicon ou 16S et différents tailles d'insert -- créeér 1 ligne par taille d'insert ***@
							@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e) == "Amplicon" || CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e) == "16S"){
							
								@for((keybis,cosbis) <- cos.groupBy(OutputHelper.getContentProperty(_,"taille_insert"))){
								
									@if(OutputHelper.getContentProperty(cosbis.toList.head,"taille_insert").toInt > OutputHelper.getInstrumentProperty(e,"nbCyclesRead1").asInstanceOf[Integer]+OutputHelper.getInstrumentProperty(e,"nbCyclesRead2").asInstanceOf[Integer]-2 || OutputHelper.getContentProperty(cosbis.toList.head,"taille_insert").toInt < OutputHelper.getInstrumentProperty(e,"nbCyclesRead1").asInstanceOf[Integer]-1+15){@(jnt=false)}else{@(jnt=true)}
									
									python3.4 /usr/local/bioinfo/src/nG6/bin/ng6_cli.py @***
									Si l'insert n'est pas assez long pour un overlap
									ou bien que la taille des inserts est inférieure à la taille des read + 15
									***@@if(!jnt){illumina_qc}else{illumina_diversity_qc} @***
									***@--date '@(CsvHelper.getRunDate(e))' @***
									***@--data-nature @if(OutputHelper.getContentProperty(cosbis.toList.head, "Type_librairie")){'@(OutputHelper.getContentProperty(cosbis.toList.head,"Type_librairie"))'}else{'-'} @***
									***@--sequencer '@(CsvHelper.getInstrumentName(e.instrument.code))' --name '@if(OutputHelper.getContentProperty(cosbis.toList.head,"Run_Name")!=""){@(CsvHelper.checkName(OutputHelper.getContentProperty(cosbis.toList.head,"Run_Name")))}else{@(CsvHelper.checkName(OutputHelper.getContentProperty(cosbis.toList.head,"Nom_pool_sequencage")))}' @***
									***@--type 'Lane 1' @***
									***@--species @if(c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cosbis.toList.head, "species", e)) != null){'@(CsvHelper.getContentProcessProperties(cosbis.toList.head, "species",e))'}else{'-'} @***
									***@--description 'Adapter type : @(CsvHelper.getHiseqAdapter(cosbis.toList.head)) @***
									si "taille_insert" est renceigné
									***@@if(OutputHelper.getContentProperty(cosbis.toList.sortWith(_.sampleCode < _.sampleCode).head,"taille_insert")!="" && OutputHelper.getContentProperty(cosbis.toList.sortWith(_.sampleCode < _.sampleCode).head,"taille_insert")!="0"){@***
										***@- Insert : @***
										***@@for(co <- cosbis.toList.sortWith(_.sampleCode < _.sampleCode)){@***
													***@@if(cosbis.toList.sortWith(_.sampleCode < _.sampleCode).head != co){, }@(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))@***
										***@}@***
									***@.} [C] @***
									***@@(c.concentration.value)pM' @***
									***@@if(!jnt){ --delete-bam} @***
									***@@if(c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cosbis.toList.head, "reference_transcriptome", e)) != null){--reference-transcriptome @(CsvHelper.getContentProcessProperties(cosbis.toList.head, "reference_transcriptome", e))} @***
									***@@if(c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cosbis.toList.head, "reference_genome", e)) != null){@***
										***@--reference-genome @(CsvHelper.getContentProcessProperties(cosbis.toList.head, "reference_genome", e) )@***
									***@} @***
									***@@if(jnt){@***
										***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e) == "16S"){--assignation-databank '/save/ng6/TODO/HiSeqIndexedGenomes/new_struct/ncbi_16S/blast/16SMicrobial' } @***
										***@--min-overlap  @if(OutputHelper.getInstrumentProperty(e,"nbCyclesRead1").asInstanceOf[Integer]+OutputHelper.getInstrumentProperty(e,"nbCyclesRead2").asInstanceOf[Integer]-2-OutputHelper.getContentProperty(cosbis.toList.head,"taille_insert").toInt-30 > 10){@***
											***@@(OutputHelper.getInstrumentProperty(e,"nbCyclesRead1").asInstanceOf[Integer]+OutputHelper.getInstrumentProperty(e,"nbCyclesRead2").asInstanceOf[Integer]-2-OutputHelper.getContentProperty(cosbis.toList.head,"taille_insert").toInt-30)}else{10} @***
										***@--max-overlap @(OutputHelper.getInstrumentProperty(e,"nbCyclesRead1").asInstanceOf[Integer]+OutputHelper.getInstrumentProperty(e,"nbCyclesRead2").asInstanceOf[Integer]-2-OutputHelper.getContentProperty(cosbis.toList.head,"taille_insert").toInt+20) @***
									***@} @***
									***@--casava directory=#CASAVA_DIRECTORY# @***
									***@@for(co <- cosbis.toList.sortWith(_.sampleCode < _.sampleCode)){@***
										***@ select-sample-id=@(CsvHelper.contentName(co))@***
									***@} @***
									***@lane=@(etm.line) --project-name @(cosbis.toList.head.projectCode) --admin-login CTD @***
									si plus d'une librairie dans le pool
									***@@if(cosbis.toList.length > 1){--keep all}
									
								}
								
							}else{
							
								python3.4 /usr/local/bioinfo/src/nG6/bin/ng6_cli.py @(CsvHelper.getFromAnalyseType(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e))) @***
								***@--date '@(CsvHelper.getRunDate(e))' @***
								***@--data-nature @if(OutputHelper.getContentProperty(cos.toList.head, "Type_librairie")){@(OutputHelper.getContentProperty(cos.toList.head,"Type_librairie"))}else{'-'} @***
								***@--sequencer '@(CsvHelper.getInstrumentName(e.instrument.code))' @***
								***@--name '@if(OutputHelper.getContentProperty(cos.toList.head,"Run_Name")!=""){@(CsvHelper.checkName(OutputHelper.getContentProperty(cos.toList.head,"Run_Name")))}else{@(CsvHelper.checkName(OutputHelper.getContentProperty(cos.toList.head,"Nom_pool_sequencage")))}' @***
								si 4/4 || 2/2 pour Standard 
											--type '@if(OutputHelper.getInstrumentProperty(e,"workflow")!="Standard"){
												1/@(e.inputContainerCodes.size) Flowcell - Lane@(etm.line)'}else{@(e.inputContainerCodes.size)/@(e.inputContainerCodes.size) Flowcell} 
								actuellement = HiSeq
								***@--type '1/@(e.inputContainerCodes.size) Flowcell @(OutputHelper.getInstrumentProperty(e,"position")) - Lane@(etm.line)' @***
								***@--species @if(c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cos.toList.head, "species", e)) != null){'@(CsvHelper.getContentProcessProperties(cos.toList.head, "species",e))'}else{'-'} @***
								***@--description 'Adapter type : @(CsvHelper.getHiseqAdapter(cos.toList.head)) @***
								si "taille_insert" est renceigné
								***@@if(OutputHelper.getContentProperty(cos.toList.sortWith(_.sampleCode < _.sampleCode).head,"taille_insert")!="" && OutputHelper.getContentProperty(cos.toList.sortWith(_.sampleCode < _.sampleCode).head,"taille_insert")!="0"){@***
									***@- Insert :@***
									***@@for(co <- cos.toList.sortWith(_.sampleCode < _.sampleCode)){@***
													***@@if(cos.toList.sortWith(_.sampleCode < _.sampleCode).head != co){, } @***
													***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e).split("10X").length > 0 ){@***
														***@@(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))-1 , @(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))-2 , @(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))-3 , @(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))-4 @***
													***@}else{@(OutputHelper.getContentProperty(co,"taille_insert"))pb for Sample @(CsvHelper.contentName(co))}@***
									***@}@***
								***@.} [C] @***
								***@@(c.concentration.value)pM' @***
								***@@if((CsvHelper.getContentProcessProperties(c.contents.toList.head, "store_bam", e) != null && CsvHelper.getContentProcessProperties(c.contents.toList.head, "store_bam", e) != "non") || (CsvHelper.getFromAnalyseType(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e)) == "methylseq")){}else{ --delete-bam} @***
								***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e).split("10X").length < 1 && (c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cos.toList.head, "reference_transcriptome", e)) != null)){--reference-transcriptome @(CsvHelper.getContentProcessProperties(cos.toList.head, "reference_transcriptome", e))} @***
								***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e).split("10X").length < 1 && (c.experimentProperties != null && (CsvHelper.getContentProcessProperties(cos.toList.head, "reference_genome", e)) != null)){@***
									***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e) == "Bisulfite"){--control-genome /save/ng6/TODO/HiSeqIndexedGenomes/new_struct/pUC19/genome/bismark_bowtie2/pUC19.fa}@***
									***@ --reference-genome @(CsvHelper.getContentProcessProperties(cos.toList.head, "reference_genome", e))@***
								***@} @***
								***@--casava directory=#CASAVA_DIRECTORY# @***
								***@@for(co <- cos.toList.sortWith(_.sampleCode < _.sampleCode)){@***
										***@@if(CsvHelper.getContentProcessProperties(cos.toList.head, "analyseType", e).split("10X").length > 0 ){@***
											***@select-sample-id=@(CsvHelper.contentName(co))-1 select-sample-id=@(CsvHelper.contentName(co))-2 select-sample-id=@(CsvHelper.contentName(co))-3 select-sample-id=@(CsvHelper.contentName(co))-4 @***
										***@}else{@***
											***@select-sample-id=@(CsvHelper.contentName(co)) @***
										***@}@***
								***@} @***
								***@lane=@(etm.line) --project-name @(cos.toList.head.projectCode) --admin-login CTD @***
									si plus d'une librairie dans le pool
									***@@if(cos.toList.length > 1){--keep all}
								
							}
							
						}
					}
				}
			}
		}
		
	}		
}